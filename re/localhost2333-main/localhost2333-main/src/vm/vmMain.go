package vm

import "html/template"

// 所有指令的结果全部保存在eax中
// stack为全局变量，一个存放opcode
// 一个存放密文

var (
	opcode, dataStack, cipher, encInputStack []uint8
	key []uint8
 	reg register
)

func initVM(input string) {
	// 初始化数据
	reg = register{0xFF, 0, 0, 0, 0}
	opcode = []byte{
		1, 2, 2, 1, 2, 1, 3, 3, 1, 3, 0, 1,
		1, 2, 2, 1, 2, 1, 3, 3, 1, 3, 0, 1,
		1, 2, 2, 1, 2, 1, 3, 3, 1, 3, 0, 1,
		1, 2, 2, 1, 2, 1, 3, 3, 1, 3, 0, 1,
		1, 2, 2, 1, 2, 1, 3, 3, 1, 3, 0, 1,
		1, 2, 2, 1, 2, 1, 3, 3, 1, 3, 0, 1,
		1, 2, 2, 1, 2, 1, 3, 3, 1, 3, 0, 1,
		1, 2, 2, 1, 2, 1, 3, 3, 1, 3, 0, 1,
		1, 2, 2, 1, 2, 1, 3, 3, 1, 3, 0, 1,
		1, 2, 2, 1, 2, 1, 3, 3, 1, 3, 0, 1,
		1, 1, 1, 2, 2, 1, 2, 0, 1,
		1, 1, 1, 2, 2, 1, 2, 0, 1,
		1, 1, 1, 2, 2, 1, 2, 0, 1,
		1, 1, 1, 2, 2, 1, 2, 0, 1,
		1, 1, 1, 2, 2, 1, 2, 0, 1,
		1, 1, 1, 2, 2, 1, 2, 0, 1,
		1, 1, 1, 2, 2, 1, 2, 0, 1,
		1, 1, 1, 2, 2, 1, 2, 0, 1,
		1, 1, 1, 2, 2, 1, 2, 0, 1,
		1, 1, 1, 2, 2, 1, 2, 0, 1,
		1, 3, 8, 4, 3, 7, 3, 3, 6, 4, 5, 5, 3, 4, 0, 3,
		1, 3, 8, 4, 3, 7, 3, 3, 6, 4, 5, 5, 3, 4, 0, 3,
		1, 3, 8, 4, 3, 7, 3, 3, 6, 4, 5, 5, 3, 4, 0, 3,
		1, 3, 8, 4, 3, 7, 3, 3, 6, 4, 5, 5, 3, 4, 0, 3,
		1, 3, 8, 4, 3, 7, 3, 3, 6, 4, 5, 5, 3, 4, 0, 3,
		1, 3, 8, 4, 3, 7, 3, 3, 6, 4, 5, 5, 3, 4, 0, 3,
		1, 3, 8, 4, 3, 7, 3, 3, 6, 4, 5, 5, 3, 4, 0, 3,
		1, 3, 8, 4, 3, 7, 3, 3, 6, 4, 5, 5, 3, 4, 0, 3,
		1, 3, 8, 4, 3, 7, 3, 3, 6, 4, 5, 5, 3, 4, 0, 3,
		1, 3, 8, 4, 3, 7, 3, 3, 6, 4, 5, 5, 3, 4, 0, 3,
		9, 10}
	cipher = []byte{155, 170, 203, 245, 138, 200, 161, 137, 224, 165,
		                 126, 16, 58, 13, 49, 117, 45, 126, 119, 100,
		                 74, 43, 235, 172, 8, 132, 43, 36, 36, 175}
	key = []byte("GOL@nD~!!!")
	dataStack = makeStack(input)
	encInputStack = nil
}

func init() {

}

func MainVM(input string) (str template.HTML) {
	// 思路：将输入全部存入stack中
	// 初始化寄存器值
	// 将加密后的数据在放回stack中
	// 由于切片的特性，可以不要堆栈指针
	initVM(input)
	for {
		code := opcode[reg.eip]
		switch code{
		case 0:
			reg.sub_0() // push
		case 1:
			reg.sub_1() // pop
		case 2:
			reg.sub_2() // xor
		case 3:
			reg.sub_3() // sub
		case 4:
			reg.sub_4() // add
		case 5:
			reg.sub_5() // or
		case 6:
			reg.sub_6() // shl
		case 7:
			reg.sub_7() // shr
		case 8:
			reg.sub_8() // mov
		case 9:
			reg.sub_9() // cmp
		case 10:
			return reg.sub_10() // ret
		}
	}
}